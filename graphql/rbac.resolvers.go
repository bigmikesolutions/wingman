package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"fmt"
	"time"

	"github.com/bigmikesolutions/wingman/graphql/generated"
	"github.com/bigmikesolutions/wingman/graphql/model"
	"github.com/bigmikesolutions/wingman/providers/db/conv"
	"github.com/bigmikesolutions/wingman/providers/db/rbac"
)

// AddUserRoleBinding is the resolver for the addUserRoleBinding field.
func (r *mutationResolver) AddUserRoleBinding(ctx context.Context, input model.AddUserRoleBindingInput) (*model.AddUserRoleBindingPayload, error) {
	panic(fmt.Errorf("not implemented: AddUserRoleBinding - addUserRoleBinding"))
}

// AddK8sUserRole is the resolver for the addK8sUserRole field.
func (r *mutationResolver) AddK8sUserRole(ctx context.Context, input model.AddK8sUserRoleInput) (*model.AddK8sUserRolePayload, error) {
	panic(fmt.Errorf("not implemented: AddK8sUserRole - addK8sUserRole"))
}

// AddDatabaseUserRole is the resolver for the addDatabaseUserRole field.
func (r *mutationResolver) AddDatabaseUserRole(ctx context.Context, input model.AddDatabaseUserRoleInput) (*model.AddDatabaseUserRolePayload, error) {
	// TODO implement this
	role := input.UserRoles[0]
	now := time.Now().UTC()
	newRole := rbac.UserRole{
		ID:          *role.ID,
		Description: role.Description,
		CreatedAt:   now,
		UpdatedAt:   now,
		CreatedBy:   "unknown", // TODO add this info
		UpdatedBy:   "unknown",

		DatabaseID: role.DatabaseAccess[0].ID,
		Info:       conv.InternalAccessType(role.DatabaseAccess[0].Info),
	}

	if len(role.DatabaseAccess[0].Tables) > 0 {
		newRole.Tables = []rbac.TableScope{
			{
				Name:       role.DatabaseAccess[0].Tables[0].Name,
				AccessType: rbac.ReadOnlyAccess,
			},
		}
	}

	if err := r.Providers.DbRbac.CreateUserRole(ctx, newRole); err != nil {
		// TODO handle error
		return nil, err
	}

	return &model.AddDatabaseUserRolePayload{
		MutationID: input.MutationID,
	}, nil
}

// Databases is the resolver for the databases field.
func (r *userRoleResolver) Databases(ctx context.Context, obj *model.UserRole) ([]*model.DatabaseAccess, error) {
	panic(fmt.Errorf("not implemented: Databases - databases"))
}

// UserRoles is the resolver for the userRoles field.
func (r *userRoleBindingResolver) UserRoles(ctx context.Context, obj *model.UserRoleBinding) ([]*model.UserRole, error) {
	panic(fmt.Errorf("not implemented: UserRoles - userRoles"))
}

// UserRole returns generated.UserRoleResolver implementation.
func (r *Resolver) UserRole() generated.UserRoleResolver { return &userRoleResolver{r} }

// UserRoleBinding returns generated.UserRoleBindingResolver implementation.
func (r *Resolver) UserRoleBinding() generated.UserRoleBindingResolver {
	return &userRoleBindingResolver{r}
}

type (
	userRoleResolver        struct{ *Resolver }
	userRoleBindingResolver struct{ *Resolver }
)
