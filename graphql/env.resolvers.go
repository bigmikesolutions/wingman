package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"log"

	"github.com/bigmikesolutions/wingman/graphql/generated"
	"github.com/bigmikesolutions/wingman/graphql/model"
)

// EnvGrant is the resolver for the envGrant field.
func (r *mutationResolver) EnvGrant(ctx context.Context, input model.EnvGrantInput) (*model.EnvGrantPayload, error) {
	// TODO implement this
	log.Printf("Env grant mutation...")
	token, err := r.Auth.Create(map[string]any{
		"input": input,
	})
	if err != nil {
		log.Printf("Env grant mutation - token not creatd: %v", err)
		return nil, err
	}

	log.Printf("Env grant mutation - token: %v", token)
	claims, err := r.Auth.Validate(token)
	if err != nil {
		log.Printf("Token is not valid!: %v", err)
	} else {
		log.Printf("Token claims: %+v", claims)
	}

	return &model.EnvGrantPayload{
		MutationID: input.MutationID,
		Token:      &token,
	}, nil
}

// Environment is the resolver for the environment field.
func (r *queryResolver) Environment(ctx context.Context, id string) (*model.Environment, error) {
	// TODO implement this stub
	return &model.Environment{
		ID: id,
	}, nil
}

// Environment returns generated.EnvironmentResolver implementation.
func (r *Resolver) Environment() generated.EnvironmentResolver { return &environmentResolver{r} }

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// ResourceGrantInput returns generated.ResourceGrantInputResolver implementation.
func (r *Resolver) ResourceGrantInput() generated.ResourceGrantInputResolver {
	return &resourceGrantInputResolver{r}
}

type (
	environmentResolver        struct{ *Resolver }
	mutationResolver           struct{ *Resolver }
	queryResolver              struct{ *Resolver }
	resourceGrantInputResolver struct{ *Resolver }
)
