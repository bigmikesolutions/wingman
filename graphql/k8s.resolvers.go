package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"fmt"

	"github.com/bigmikesolutions/wingman/graphql/generated"
	"github.com/bigmikesolutions/wingman/graphql/model"
)

// Namespace is the resolver for the namespace field.
func (r *clusterResolver) Namespace(ctx context.Context, obj *model.Cluster, name *string) (*model.Namespace, error) {
	panic(fmt.Errorf("not implemented: Namespace - namespace"))
}

// K8s is the resolver for the k8s field.
func (r *environmentResolver) K8s(ctx context.Context, obj *model.Environment, id string) (*model.Cluster, error) {
	panic(fmt.Errorf("not implemented: K8s - k8s"))
}

// Pod is the resolver for the pod field.
func (r *namespaceResolver) Pod(ctx context.Context, obj *model.Namespace, namespace *string, id *string) (*model.Pod, error) {
	panic(fmt.Errorf("not implemented: Pod - pod"))
}

// Pods is the resolver for the pods field.
func (r *namespaceResolver) Pods(ctx context.Context, obj *model.Namespace, namespace *string, first *int) ([]*model.Pod, error) {
	panic(fmt.Errorf("not implemented: Pods - pods"))
}

// K8s is the resolver for the k8s field.
func (r *resourceGrantInputResolver) K8s(ctx context.Context, obj *model.ResourceGrantInput, data []*model.NamespaceResource) error {
	panic(fmt.Errorf("not implemented: K8s - k8s"))
}

// Cluster returns generated.ClusterResolver implementation.
func (r *Resolver) Cluster() generated.ClusterResolver { return &clusterResolver{r} }

// Namespace returns generated.NamespaceResolver implementation.
func (r *Resolver) Namespace() generated.NamespaceResolver { return &namespaceResolver{r} }

type (
	clusterResolver   struct{ *Resolver }
	namespaceResolver struct{ *Resolver }
)
