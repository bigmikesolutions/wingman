// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Cluster struct {
	ID   string `json:"id"`
	Pod  *Pod   `json:"pod,omitempty"`
	Pods []*Pod `json:"pods,omitempty"`
}

func (Cluster) IsEntity() {}

type Database struct {
	ID     string      `json:"id"`
	Driver *DriverType `json:"driver,omitempty"`
}

func (Database) IsEntity() {}

type Environment struct {
	ID       string    `json:"id"`
	K8s      *Cluster  `json:"k8s,omitempty"`
	Database *Database `json:"database,omitempty"`
}

func (Environment) IsEntity() {}

type Pod struct {
	ID string `json:"id"`
}

func (Pod) IsEntity() {}

type Query struct {
}

type User struct {
	ID        string  `json:"id"`
	Email     string  `json:"email"`
	FirstName *string `json:"firstName,omitempty"`
	LastName  *string `json:"lastName,omitempty"`
}

func (User) IsEntity() {}

type DriverType string

const (
	DriverTypePostgres DriverType = "POSTGRES"
	DriverTypeMysql    DriverType = "MYSQL"
)

var AllDriverType = []DriverType{
	DriverTypePostgres,
	DriverTypeMysql,
}

func (e DriverType) IsValid() bool {
	switch e {
	case DriverTypePostgres, DriverTypeMysql:
		return true
	}
	return false
}

func (e DriverType) String() string {
	return string(e)
}

func (e *DriverType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DriverType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DriverType", str)
	}
	return nil
}

func (e DriverType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
