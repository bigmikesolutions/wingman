// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type AddK8sUserRole struct {
	AccessType  AccessType `json:"accessType"`
	Description *string    `json:"description,omitempty"`
	Namespaces  []*string  `json:"namespaces,omitempty"`
	Pods        []*string  `json:"pods,omitempty"`
}

type AddK8sUserRoleError struct {
	Code    AddK8sUserRoleClientErrorCode `json:"code"`
	Message *string                       `json:"message,omitempty"`
}

type AddK8sUserRoleInput struct {
	MutationID *string           `json:"mutationID,omitempty"`
	UserRoles  []*AddK8sUserRole `json:"userRoles"`
}

type AddK8sUserRolePayload struct {
	MutationID *string              `json:"mutationID,omitempty"`
	UserRoles  []*K8sUserRole       `json:"userRoles,omitempty"`
	Error      *AddK8sUserRoleError `json:"error,omitempty"`
}

type AddUserRoleBindingInput struct {
	MutationID *string                   `json:"mutationID,omitempty"`
	Bindings   []*NewUserRoleBindingData `json:"bindings"`
}

type AddUserRoleBindingOutputError struct {
	Code    AddUserRoleBindingClientErrorCode `json:"code"`
	Message *string                           `json:"message,omitempty"`
}

type AddUserRoleBindingPayload struct {
	MutationID *string                        `json:"mutationID,omitempty"`
	Bindings   []*UserRoleBinding             `json:"bindings"`
	Error      *AddUserRoleBindingOutputError `json:"error,omitempty"`
}

type Cluster struct {
	ID        string     `json:"id"`
	Namespace *Namespace `json:"namespace,omitempty"`
}

func (Cluster) IsEntity() {}

type Database struct {
	ID     string      `json:"id"`
	Driver *DriverType `json:"driver,omitempty"`
}

func (Database) IsEntity() {}

type Environment struct {
	ID          string     `json:"id"`
	Description *string    `json:"description,omitempty"`
	CreatedAt   time.Time  `json:"createdAt"`
	ModifiedAt  *time.Time `json:"modifiedAt,omitempty"`
	K8s         *Cluster   `json:"k8s,omitempty"`
	Database    *Database  `json:"database,omitempty"`
}

func (Environment) IsEntity() {}

type K8sUserRole struct {
	ID          string     `json:"id"`
	AccessType  AccessType `json:"accessType"`
	Namespaces  []*string  `json:"namespaces,omitempty"`
	Pods        []*string  `json:"pods,omitempty"`
	Description *string    `json:"description,omitempty"`
	CreatedAt   time.Time  `json:"createdAt"`
	ModifiedAt  *time.Time `json:"modifiedAt,omitempty"`
}

func (K8sUserRole) IsEntity() {}

type Mutation struct {
}

type Namespace struct {
	Name string `json:"name"`
	Pod  *Pod   `json:"pod,omitempty"`
	Pods []*Pod `json:"pods,omitempty"`
}

func (Namespace) IsEntity() {}

type NewUserRoleBindingData struct {
	UserID      string   `json:"userID"`
	RoleIDs     []string `json:"roleIDs"`
	Description *string  `json:"description,omitempty"`
}

type Pod struct {
	ID        string `json:"id"`
	Name      string `json:"name"`
	Namespace string `json:"namespace"`
	Image     string `json:"image"`
}

func (Pod) IsEntity() {}

type Query struct {
}

type User struct {
	ID          string     `json:"id"`
	Email       string     `json:"email"`
	FirstName   *string    `json:"firstName,omitempty"`
	LastName    *string    `json:"lastName,omitempty"`
	Active      *bool      `json:"active,omitempty"`
	Description *string    `json:"description,omitempty"`
	CreatedAt   time.Time  `json:"createdAt"`
	ModifiedAt  *time.Time `json:"modifiedAt,omitempty"`
}

func (User) IsEntity() {}

type UserRoleBinding struct {
	ID          *string    `json:"id,omitempty"`
	UserID      string     `json:"userID"`
	RoleIDs     []string   `json:"roleIDs"`
	Description *string    `json:"description,omitempty"`
	CreatedAt   time.Time  `json:"createdAt"`
	ModifiedAt  *time.Time `json:"modifiedAt,omitempty"`
}

func (UserRoleBinding) IsEntity() {}

type AccessType string

const (
	AccessTypeRead  AccessType = "Read"
	AccessTypeWrite AccessType = "Write"
)

var AllAccessType = []AccessType{
	AccessTypeRead,
	AccessTypeWrite,
}

func (e AccessType) IsValid() bool {
	switch e {
	case AccessTypeRead, AccessTypeWrite:
		return true
	}
	return false
}

func (e AccessType) String() string {
	return string(e)
}

func (e *AccessType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AccessType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AccessType", str)
	}
	return nil
}

func (e AccessType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AddK8sUserRoleClientErrorCode string

const (
	AddK8sUserRoleClientErrorCodeInvalidInput     AddK8sUserRoleClientErrorCode = "INVALID_INPUT"
	AddK8sUserRoleClientErrorCodeUserNotFound     AddK8sUserRoleClientErrorCode = "USER_NOT_FOUND"
	AddK8sUserRoleClientErrorCodeUserRoleNotFound AddK8sUserRoleClientErrorCode = "USER_ROLE_NOT_FOUND"
	AddK8sUserRoleClientErrorCodeProviderError    AddK8sUserRoleClientErrorCode = "PROVIDER_ERROR"
	AddK8sUserRoleClientErrorCodeGenericError     AddK8sUserRoleClientErrorCode = "GENERIC_ERROR"
)

var AllAddK8sUserRoleClientErrorCode = []AddK8sUserRoleClientErrorCode{
	AddK8sUserRoleClientErrorCodeInvalidInput,
	AddK8sUserRoleClientErrorCodeUserNotFound,
	AddK8sUserRoleClientErrorCodeUserRoleNotFound,
	AddK8sUserRoleClientErrorCodeProviderError,
	AddK8sUserRoleClientErrorCodeGenericError,
}

func (e AddK8sUserRoleClientErrorCode) IsValid() bool {
	switch e {
	case AddK8sUserRoleClientErrorCodeInvalidInput, AddK8sUserRoleClientErrorCodeUserNotFound, AddK8sUserRoleClientErrorCodeUserRoleNotFound, AddK8sUserRoleClientErrorCodeProviderError, AddK8sUserRoleClientErrorCodeGenericError:
		return true
	}
	return false
}

func (e AddK8sUserRoleClientErrorCode) String() string {
	return string(e)
}

func (e *AddK8sUserRoleClientErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AddK8sUserRoleClientErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AddK8sUserRoleClientErrorCode", str)
	}
	return nil
}

func (e AddK8sUserRoleClientErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AddUserRoleBindingClientErrorCode string

const (
	AddUserRoleBindingClientErrorCodeInvalidInput     AddUserRoleBindingClientErrorCode = "INVALID_INPUT"
	AddUserRoleBindingClientErrorCodeUserNotFound     AddUserRoleBindingClientErrorCode = "USER_NOT_FOUND"
	AddUserRoleBindingClientErrorCodeUserRoleNotFound AddUserRoleBindingClientErrorCode = "USER_ROLE_NOT_FOUND"
	AddUserRoleBindingClientErrorCodeProviderError    AddUserRoleBindingClientErrorCode = "PROVIDER_ERROR"
	AddUserRoleBindingClientErrorCodeGenericError     AddUserRoleBindingClientErrorCode = "GENERIC_ERROR"
)

var AllAddUserRoleBindingClientErrorCode = []AddUserRoleBindingClientErrorCode{
	AddUserRoleBindingClientErrorCodeInvalidInput,
	AddUserRoleBindingClientErrorCodeUserNotFound,
	AddUserRoleBindingClientErrorCodeUserRoleNotFound,
	AddUserRoleBindingClientErrorCodeProviderError,
	AddUserRoleBindingClientErrorCodeGenericError,
}

func (e AddUserRoleBindingClientErrorCode) IsValid() bool {
	switch e {
	case AddUserRoleBindingClientErrorCodeInvalidInput, AddUserRoleBindingClientErrorCodeUserNotFound, AddUserRoleBindingClientErrorCodeUserRoleNotFound, AddUserRoleBindingClientErrorCodeProviderError, AddUserRoleBindingClientErrorCodeGenericError:
		return true
	}
	return false
}

func (e AddUserRoleBindingClientErrorCode) String() string {
	return string(e)
}

func (e *AddUserRoleBindingClientErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AddUserRoleBindingClientErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AddUserRoleBindingClientErrorCode", str)
	}
	return nil
}

func (e AddUserRoleBindingClientErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DriverType string

const (
	DriverTypePostgres DriverType = "POSTGRES"
	DriverTypeMysql    DriverType = "MYSQL"
)

var AllDriverType = []DriverType{
	DriverTypePostgres,
	DriverTypeMysql,
}

func (e DriverType) IsValid() bool {
	switch e {
	case DriverTypePostgres, DriverTypeMysql:
		return true
	}
	return false
}

func (e DriverType) String() string {
	return string(e)
}

func (e *DriverType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DriverType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DriverType", str)
	}
	return nil
}

func (e DriverType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
