extend schema
    @link(url: "https://specs.apollo.dev/federation/v2.4", import: ["@key", "@shareable"])
    @link(url: "../../wingman/shared.graphqls")
    @link(url: "../../wingman/env.graphqls")

extend type Environment {
    database(id: String!): Database @goField(forceResolver: true)
}

extend type Mutation {
    addDatabase(input: AddDatabaseInput!): AddDatabasePayload!
}

type Database @key (fields: "id") {
    id: String!
    info: DatabaseInfo @goField(forceResolver: true)
    table(name: String!, first:Int = 50, after: Cursor, where: TableFilter): TableDataConnection! @goField(forceResolver: true)
}

type DatabaseInfo  {
    id: String!
    host: String!
    port: Int!
    driver: DriverType!
}

extend input ResourceGrantInput {
    database: [DatabaseResource] @goField(forceResolver: true)
}

input DatabaseResource {
    id: String!
    info: AccessType
    table: [TableResource]
}

input TableResource {
    name: String!
    columns: [String]
    accessType: AccessType
}

enum DriverType {
    POSTGRES
    MYSQL
}

input TableFilter {
    columns: [String]
}

type TableDataConnection {
    connectionInfo: ConnectionInfo!
    edges: [TableDataEdge]
}

type TableDataEdge {
    cursor: Cursor!
    node: TableRow
}

type TableRow {
    index: Int
    values: [String]
}

input AddDatabaseInput  {
    mutationId: ID
    env: String!
    id: String!
    name: String!
    user: String!
    password: String!
    host: String!
    port: Int!
    driver: DriverType!
}

type AddDatabasePayload {
    mutationId: ID
    id: String!
    error: AddDatabaseError
}

type AddDatabaseError {
    code: AddDatabaseClientErrorCode!
    message: String
}

enum AddDatabaseClientErrorCode {
    INVALID_INPUT
    ALREADY_EXISTS
}

